[{"/home/rax/VSchool/Module 3/Assignments/react-meme-generator-individual/src/index.js":"1","/home/rax/VSchool/Module 3/Assignments/react-meme-generator-individual/src/App.js":"2","/home/rax/VSchool/Module 3/Assignments/react-meme-generator-individual/src/Memes.js":"3"},{"size":164,"mtime":1610595621180,"results":"4","hashOfConfig":"5"},{"size":7237,"mtime":1611255023320,"results":"6","hashOfConfig":"5"},{"size":647,"mtime":1610595591030,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1qu8axr",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"/home/rax/VSchool/Module 3/Assignments/react-meme-generator-individual/src/index.js",[],["17","18"],"/home/rax/VSchool/Module 3/Assignments/react-meme-generator-individual/src/App.js",["19"],"import React from \"react\"\n\nimport axios from \"axios\"\n\nimport Memes from \"./Memes\"\n\n/*const allSelectedMemes = []\nconst placeKeeper = []*/\nconst savedMemeAndText = []\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            list: [],\n            memeValue: 0,\n            newMeme: [],\n            memeKey: 0,\n            memeUrl: \"\",\n            /*allMemes: placeKeeper,*/\n            topText: \"\",\n            bottomText: \"\",\n            selectedMemeAndText: savedMemeAndText\n        }\n        this.randomNumber = this.randomNumber.bind(this)\n        this.selectedMemeText = this.selectedMemeText.bind(this)\n        this.fillIn = this.fillIn.bind(this)\n        this.editButton = this.editButton.bind(this)\n        this.deleteButton = this.deleteButton.bind(this)\n    }\n\n    componentDidMount() {\n        axios.get(\"https://api.imgflip.com/get_memes\").then((response) => {\n            this.setState({\n                list: response.data.data.memes\n            })\n            /*console.log(response.data)*/\n            this.randomNumber()\n        })\n    }\n\n    randomNumber() {\n        const total = this.state.list.length\n        let random = Math.floor(Math.random() * total)\n\n        let memeData = this.state.list\n        let memePosition = this.state.memeValue\n        const data = memeData[memePosition]\n\n        this.setState({\n            memeValue: random,\n            newMeme: data\n        })\n        /*console.log(random)\n        console.log(total)*/\n    }\n\n    /*selectedMemeText() {\n        const selected = this.state.newMeme\n        allSelectedMemes.push(selected)\n\n        let allText = {\n            topText: this.state.topText,\n            bottomText: this.state.bottomText\n        }\n        savedText.push(allText)\n\n        this.setState({\n            allMemes: allSelectedMemes,\n            topText: \"\",\n            bottomText: \"\",\n            selectedText: savedText\n        })\n    }*/\n\n    /*selectedMemeText() {\n\n        let allMemeAndText = {\n            topText: this.state.topText,\n            bottomText: this.state.bottomText,\n            memeKey: this.state.newMeme.id,\n            memeUrl: this.state.newMeme.url\n        }\n        savedMemeAndText.push(allMemeAndText)\n\n        this.setState({\n            topText: \"\",\n            bottomText: \"\",\n            selectedMemeAndText: savedMemeAndText\n        })\n    }*/\n\n    selectedMemeText() {\n\n        this.setState((prevState) => {\n\n            let newMemeAndText = {\n                topText: prevState.topText,\n                bottomText: prevState.bottomText,\n                memeKey: prevState.newMeme.id,\n                memeUrl: prevState.newMeme.url\n            }\n            return {\n                topText: \"\",\n                bottomText: \"\",\n                selectedMemeAndText: [...prevState.selectedMemeAndText, newMemeAndText]\n            }\n        })\n    }\n\n    /*fillIn(event) {\n        const { name, value } = event.target\n        this.setState({\n            memeText: {\n                [name]: [value]\n            }\n        })\n    }*/\n\n    fillIn(event) {\n        const { name, value } = event.target\n        this.setState({\n            [name]: [value]\n        })\n    }\n\n    editButton(choices, topText, bottomText, id) {\n        /*console.log(choices)\n        console.log(topText)\n        console.log(bottomText)\n        console.log(id)*/\n\n        this.setState({\n            newMeme: { url: choices, id: id },\n            topText: topText,\n            bottomText: bottomText\n        })\n\n        this.deleteButton(id)\n    }\n\n    /*deleteButton(id) {\n        let search = this.state.selectedMemeAndText\n        console.log(id)\n        console.log(search)\n        const index = search.findIndex(x => x.memeKey === id)\n        console.log(index)\n\n        if (index !== 0) {\n            let erasedMemeAndTextArr = search.splice(index, 1)\n            console.log(erasedMemeAndTextArr)\n            console.log(search)\n\n            this.setState({\n                selectedMemeAndText: search\n            })\n        } else if (index === 0) {\n            let erasedMemeAndTextArr = search.shift()\n            console.log(erasedMemeAndTextArr)\n            console.log(search)\n\n            this.setState({\n                selectedMemeAndText: search\n            })\n        }\n    }*/\n\n    /*deleteButton(id) {\n        let search = this.state.selectedMemeAndText\n        console.log(id)\n        console.log(search)\n        const index = search.findIndex(x => x.memeKey === id)\n        console.log(index)\n\n        let erasedMemeAndTextArr = search.splice(index, 1)\n        console.log(erasedMemeAndTextArr)\n        console.log(search)\n\n        this.setState({\n            selectedMemeAndText: search\n        })\n    }*/\n\n    deleteButton(id) {\n\n        this.setState((prevState) => {\n            let newArr = prevState.selectedMemeAndText.filter(function (each) {\n                if (each.memeKey !== id) {\n                    return true\n                } else {\n                    return false\n                }\n            })\n            return {\n                selectedMemeAndText: newArr\n            }\n        })\n    }\n\n    render() {\n\n        let selection = this.state.selectedMemeAndText\n        /*console.log(selection)*/\n\n        const edit = this.editButton\n        const remove = this.deleteButton\n\n        const updatedData = selection.map(function (each) {\n            return (\n                <Memes\n                    key={each.memeKey}\n                    id={each.memeKey}\n                    choices={each.memeUrl}\n                    topText={each.topText}\n                    bottomText={each.bottomText}\n                    editBtn={edit}\n                    deleteBtn={remove}\n                />\n            )\n        })\n\n        console.log(this.state.newMeme)\n        let choosenMeme = this.state.newMeme.url\n\n        return (\n            <div>\n                <h1>React Meme Generator</h1>\n                <div className=\"mainInputContainer\">\n                    <div className=\"intialMemeContainer\">\n                        <img src={choosenMeme} height=\"600\" width=\"600\" />\n                        <p className=\"topText\">{this.state.topText}</p>\n                        <p className=\"bottomText\">{this.state.bottomText}</p>\n                    </div>\n                    <form>\n                        <input\n                            type=\"text\"\n                            name=\"topText\"\n                            placeHolder=\"Top Text\"\n                            value={this.state.topText}\n                            onChange={this.fillIn}\n                        />\n                        <input\n                            type=\"text\"\n                            name=\"bottomText\"\n                            placeHolder=\"Bottom Text\"\n                            value={this.state.bottomText}\n                            onChange={this.fillIn}\n                        />\n                    </form>\n                    <button onClick={this.randomNumber}>New Meme</button>\n                    <button onClick={this.selectedMemeText}>Select Meme</button>\n                </div>\n                {updatedData}\n            </div>\n        )\n    }\n}\n\nexport default App","/home/rax/VSchool/Module 3/Assignments/react-meme-generator-individual/src/Memes.js",["20"],"import React from \"react\"\n\nfunction Memes(props) {\n    return (\n        <div className=\"memesComponent\">\n            <div className=\"singleMemeContainer\">\n                <img src={props.choices} name={props.id} width=\"600\" height=\"600\" />\n                <p className=\"topTextSingleMeme\">{props.topText}</p>\n                <p className=\"bottomTextSingleMeme\">{props.bottomText}</p>\n            </div>\n            <button onClick={() => props.editBtn(props.choices, props.topText, props.bottomText, props.id)}>Edit</button>\n            <button onClick={() => props.deleteBtn(props.id)}>Delete</button>\n        </div>\n    )\n}\n\nexport default Memes",{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":230,"column":25,"nodeType":"27","endLine":230,"endColumn":75},{"ruleId":"25","severity":1,"message":"26","line":7,"column":17,"nodeType":"27","endLine":7,"endColumn":85},"no-native-reassign",["28"],"no-negated-in-lhs",["29"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]